/*!
  \file
  \author provemet
  \version 1
  \date September 2024
  \brief Заголовочный файл содержащий описание макросов, перечислений, основных
  структур, определений типов, функций, переменных и констант используемых при
  реализации библиотеки игры Тетрис.

  Файл содержит:
    ...
*/

#ifndef TETRIS_H
#define TETRIS_H

#include "gamepref.h"

typedef enum UserAction_t {
  Start,
  Pause,
  Terminate,
  Left,
  Right,
  Up,
  Down,
  Action
} UserAction_t;

/*!
  \brief Перечисление индексов фигур для определения выбора конкретной фигуры в
  массиве.
*/
typedef enum tetraminoIndex_t {
  I_TYPE,  ///< Индекс фигуры I-типа
  O_TYPE,  ///< Индекс фигуры O-типа
  T_TYPE,  ///< Индекс фигуры T-типа
  L_TYPE,  ///< Индекс фигуры L-типа
  J_TYPE,  ///< Индекс фигуры J-типа
  S_TYPE,  ///< Индекс фигуры S-типа
  Z_TYPE   ///< Индекс фигуры Z-типа
} tetraminoIndex_t;

/*!
  \brief Перечисление индексов ориентации фигуры.
*/
typedef enum tetOrientation_t {
  ToTop,  ///< Ориентация соответсвующее базовому описанию фигуры.
  ToRight,  ///< Ориентация на 90 градусов по часовой стрелке от базового
            ///< описания фигуры.
  ToBottom,  ///< Ориентация на 180 градусов по часовой стрелке от базового
             ///< описания фигуры.
  ToLeft  ///< Ориентация на 90 градсов против часовой стрелки от базового
          ///< описания фигуры.
} tetOrientation_t;

/*!
  \brief Перечисление индексов направления движения фигуры.
*/
typedef enum tetMoveDirection_t {
  MoveDown = 1,  ///< Значение направления движения вниз
  MoveLeft,  ///< Значение направления движения влево.
  MoveRight,  ///< Значение направления ддвижения вправо.
  MoveUp  ///< Служебное значение, необходимое для возврата фигуры в
          ///< первоначальное положение
} tetMoveDirection_t;

/*!
  \brief Перечисление индексов направления вращения фигуры.
*/
typedef enum tetRotateDirection_t {
  RotateCCwise = -1,  ///< Определяет вращение против часовой стрелки
  RotateCwise = 1  ///< Определяет вращение по часовой стрелке
} tetRotateDirection_t;

/*!
  \brief Структура описания фигуры тетрамино.

  Структура предназначена для реализпации хранения информации о фигурах
  тетрамино.
*/
typedef struct Tetramino_t {
  const int* data;  ///< Массив ячеек хранящих размещение значимых и пустых (0)
                    ///< ячеек в квадрате описывающем фигуру.
  const int side;  ///< Целочисленное значение описывающее размерность стороны
                   ///< квадрата описывающего фигуру.
} Tetramino_t;

static const int i_type_tetramino[] = {0, 0, 0, 0, 1, 1, 1, 1,
                                       0, 0, 0, 0, 0, 0, 0, 0};

static const int o_type_tetramino[] = {2, 2, 2, 2};

static const int t_type_tetramino[] = {0, 0, 0, 3, 3, 3, 0, 3, 0};

static const int l_type_tetramino[] = {0, 0, 0, 4, 4, 4, 4, 0, 0};

static const int j_type_tetramino[] = {0, 0, 0, 5, 5, 5, 0, 0, 5};

static const int s_type_tetramino[] = {0, 0, 0, 0, 6, 6, 6, 6, 0};

static const int z_type_tetramino[] = {0, 0, 0, 7, 7, 0, 0, 7, 7};

static const Tetramino_t Tetraminoes[] = {
    {i_type_tetramino, 4}, {o_type_tetramino, 2}, {t_type_tetramino, 3},
    {l_type_tetramino, 3}, {j_type_tetramino, 3}, {s_type_tetramino, 3},
    {z_type_tetramino, 3}};

/*!
  \brief Структура описания состояния текущей фигуры тетрамино относительно
  игрового поля.

  Структура предназначена для хранения индекса текущей игровой фигуры, координат
  смещения относительно левого-верхнего угла игрвого поля, направления
  ориентации верха фигуры относительно оси вращения.
*/
typedef struct TetraminoState_t {
  tetraminoIndex_t
      tetraminoIndex;  ///< Целочисленное значение индекса в массиве фигур.
                       ///< Индекс может определяться с использованием enum
                       ///< tetramino_index.
  int offsetRow;  ///< Целочисленное значение смещения фигуры по вертикали
                  ///< относительно левого верхнего угла игрового поля.
  int offsetCol;  ///< Целочисленное значение смещения фигуры по горизонтали
                  ///< относительно левого верхнего угла игрового поля.
  int orientation;  ///< Целочисленное значение ориентации фигуры относительно
                    ///< оси вращения. Определяется значениями перечисления
                    ///< tetOrientation_t
} TetraminoState_t;

/*!
  \brief Структура состояния игры на игровом этапе.

  Структура хранит данные состояния игры на каждом игровом такте. Предназначена
  для передачи значений для отображения игрвого процесса.
*/
typedef struct GameInfo_t {
  int** field;  ///< Указатель область памяти хранящее двумерный массив
                ///< целочисленных значений отображающих игровое поле.
  int** next;   // (нафига не понял)
  int score;  ///< Целочисленное значение хранящее текущее количество очков
              ///< полученное игроком во время игрового процесса.
  int high_score;  ///< Целочисленное значение хранящее наилучший роезультат,
                   ///< полученный иигроками за все время игры.
  int level;  ///< Целочисленное значение хранящее значение текущего уровня
              ///< игры. На значение свойства speed в текущей структуре.
  int speed;  ///< Целочисленное значение хранящее значения задержки между
              ///< каждым тактом игрового процесса. Изменяется в зависимости от
              ///< значения свойства level в текущей структуре.
  int pause;  ///< Целочисленное значение индикации паузы в игре.
} GameInfo_t;

/*!
  \brief Функция (конструктор) выделения памяти, для структуры GameInfo_t.

  Функция предназначена для выделения области памяти для хранения структуры GameInfo_t предназначенной для хранения текущего состояния игры в моменте времени.
*/
GameInfo_t* createGameInfo();

/*!
  \brief Функция (конструктор) создания массива ячеек игрового поля.
  \param [in] rows Целочисленное значение количества ячеек по вертикали.
  \param [in] cols Целочисленное значение количества ячеек по горизонтали.
  \return Указатель на область памяти, хранящий массив целочисленных значений ячеек игрового поля.

  Функция предназначена для выделения области памяти для хранения целочисленных значений ячеек игрового поля.
*/
int** createGameField(const int rows, const int cols);

/*!
  \brief Функция (деструктор) очищения памяти, занимаемой структурой GameInfo_t.
  \param [in] game Указатель на область памяти, занимаемой структурой GameInfo_t.

  Функция предназначена для освобождения области памяти выделенной для хранения структуры GameInfo_t предназначенной для хранения текущего состояния игры в моменте времени.
*/
void destroyGameInfo(GameInfo_t* game);

/*!
  \brief Функция (деструктор) очищения памяти, занимаемой массивом ячеек игрового поля.
  \param [in] field Указатель на область памяти, занимаемой массивом значений ячеек игрового поля.

  Функция предназначена для освобождения области памяти выделенной для хранения целочисленных значений ячеек игрового поля.
*/
void destroyGameField(int** field);

// Game mechanics
// void updateCurrentState(GameInfo_t *curGame);

/*!
  \brief Функция обновлениния состояния игры
  \param [in,out] curGame Указатель на область памяти выделенную для храненеия структуры GameInfo_t.

*/
//void updateGame(GameInfo_t *curGame);

/*!
     \brief Получение значения хранимого в ячейке игрового поля
     \param [in] gameboard Указатель на область памяти, хранящую массив
   значений ячеек игрового поля. \param [in] col Целочисленное значение,
   определяющее координату столбца целевой ячейки игрового поля. \param [in] row
   Целочисленное значение, определяющее координату строки целевой ячейки
   игрового поля. \return Значение, хранимой в целевой ячейке игрового поля.
     \exception Если не передан указатель на область памяти, хранящую набор
   ячеек игрового поля возвращает -1.

     Функция предназначена для получения значения в ячейке игрового поля и
   передачи его для последующей обработки.
*/
int getCellValue(const int** gameboard, int col, int row);

/*!
     \brief Изменение значения ячейки на игровом поле.
     \param [in,out] gameboard Указатель на область памяти, хранящее массив
   значений ячеек игрового поля. \param [in] col Целочисленное значение,
   определяющее координату столбца целевой ячейки игрового поля. \param [in] row
   елочисленное значение, определяющее координату строки целевой ячейки игрового
   поля. \return 0 - успешное выполнение изменений, 1 - ошибка выполнения.
     \exception Если указатель на указатель области памяти, хранящую массив
   значений игрового поля, не передан, возвращает ненулевое значение кода
   ошибки.

     Функция предназначена для изменения значения ячейки игрового поля.
*/
int setCellValue(int** gameboard, int col, int row, int val);

/*!
  \brief Функция обработки действия "Вращение фигуры"
  \param [in,out] tetState Указатель на структуру типа struct TetraminoState_t.
  \param [in] chdir Значение определяющее направление вращения
  фигуры.
  \return 0 - если функция отработала успешно, 1 - при возникновении
  исключений.
  \exception Если не передан указатель на структуру возвращает 1.

  Функция предназначена для реализации действия "Вращение фигуры". Функция
  принимает на вход указатель на область в памяти, выделенную под структуру
  struct TetraminoState_t, в которой изменяет свойство orientation. Данное
  свойство необходимо для правильного определения ориентации фигуры относительно
  центра вращения.
  В качестве значений, передаваемых для определения направления вращения
  необходимо использовать значения перечисления tetRotateDirection_t.

*/
int rotateTetramino(TetraminoState_t* tetState,
                    const tetRotateDirection_t chdir);

/*!
  \brief Функция обработки действия "Движение фигуры"
  \param [in,out] tetState Указатель на структуру типа struct TetraminoState_t.
  \param [in] direction Значение направления движения фигуры. Значения
  определены перечислением tetMoveDirection_t. \return 0 - если функция
  отработала успешно, 1 - при возникновении исключений. \exception Если не
  передан указатель на структуру

  Функция предназначена для изменения значений свойств смещения фигуры по
  горизонтали или вертикали при обработке действия "Перемещение фигуры". Функция
  принимает на вход указатель на область в памяти, выделенную под структуру
  struct TetraminoState_t, в которой изменяет свойства offsetRow и offsetCol.
  В качестве параметра направления движения функция принимает на вход значения
  определенные перечислением tetMoveDirection_t.
*/
int moveTetramino(TetraminoState_t* tetState,
                  const tetMoveDirection_t direction);

/*!
  \brief Функция проверки коллизий расположения фигуры относительно игрового
  поля. \param [in] gameinfo
  Указатель на структуру типа struct GameInfo_t. \param [in] tetState Указатель
  на структуру типа struct TetraminoState_t. \return 0 - если функция не нашла
  пересечений ненулевых ячеек, 1 - при наличии коллизий. \exception Если не
  передан указатель на структуру

  Функция предназначена для детекции коллизий при выполнении обработки действий
  предусмотренных функциями moveTetramino(), rotateTetramino(). Функция
  принимает на вход указатели на структуры struct GameInfo_t и struct
  TetraminoState_t.
*/
int checkCollision(GameInfo_t* gameinfo, TetraminoState_t* tetState);
// void userInput(UserAction_t action, bool hold); //обязательная

/*!
  \brief Функция считывания из файла значения лучшего результата
  \return Возвращает целочисленное значение отражающее наилучший результат или 0 (при возникновении исключений или попытке записать отрицательное значение).
  \exception При ошибке открытия файла или отсутсвии значения в файла.

  Функция предназначена для считывания значения лучшего результата из файла. 
*/
int getHighScore();

/*!
  \brief Функция считывания из файла значения лучшего результата
  \return Возвращает целочисленное значение отражающее наилучший результат

  Функция предназначена для записи значения лучшего результата в файл. 
*/
void saveHighScore(const int hscore);

// GameInfo_t updateCurrentState(); // обязательная

#endif  // TETRIS_H